{"version":3,"sources":["ww-drawing-history.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;oCAUgC,2BAA2B;;;;4BAClC,kBAAkB;;;;IAErC,gBAAgB,GACP,SADT,gBAAgB,GACJ;0BADZ,gBAAgB;CAEjB;;qBAGU,gBAAgB","file":"ww-drawing-history.js","sourcesContent":["/**\n * Created by andrew on 8/13/15.\n */\n\n/**\n * ...\n * @author Andrew Rapo (andrew@worthwhilegames.org)\n * @license MIT\n */\n\nimport WwDrawingHistoryUnit from'./ww-drawing-history-unit';\nimport WwDeviceInfo from './ww-device-info';\n\nclass WwDrawingHistory {\n    constructor() {\n    }\n}\n\nexport default WwDrawingHistory;\n\n/*\n\n package org.wwlib.drawing\n {\n import org.wwlib.utils.WwDebug;\n import org.wwlib.utils.WwDeviceInfo;\n\n\npublic class WwDrawingHistory\n{\n    private var __debug:WwDebug;\n    private var __units:Vector.<WwDrawingHistoryUnit>;\n    private var __startTime:int;\n    private var __duration:int;\n    private var __timeScale:Number = 1.0;\n    private var __id:int;\n    private var __unitLineLength:Number;\n    private var __sessions:Vector.<WwDrawingHistorySession>;\n\n    private var __json:Object = null;\n\n    public function WwDrawingHistory()\n    {\n        __debug = WwDebug.instance;\n        __units = new Vector.<WwDrawingHistoryUnit>;\n        __startTime = 0;\n        __duration = 0;\n        __unitLineLength = 0;\n        __sessions = new Vector.<WwDrawingHistorySession>;\n    }\n\n    public function addUnit(_unit:WwDrawingHistoryUnit):void\n    {\n\n        if (_unit)\n        {\n            //__debug.msg(\"QcColoringHistory:addUnit: \" + _unit.id, \"6\");\n            __units.push(_unit);\n            __unitLineLength += _unit.lineLength;\n            __duration += _unit.duration;\n        }\n        else\n        {\n            __debug.msg(\"WwDrawingHistory:addUnit: unit is null\", \"6\");\n        }\n    }\n\n    public function removeLastUnit():WwDrawingHistoryUnit\n    {\n        var unit:WwDrawingHistoryUnit = __units.pop();\n        if (unit)\n        {\n            __unitLineLength -= unit.lineLength;\n            __duration -= unit.duration;\n        }\n\n        return unit;\n    }\n\n    public static function MERGE_HISTORIES(_history1:WwDrawingHistory, _history2:WwDrawingHistory, _history3:WwDrawingHistory):WwDrawingHistory\n    {\n        var new_history:WwDrawingHistory = new WwDrawingHistory;\n        var unit:WwDrawingHistoryUnit;\n\n        for each (unit in _history1.units)\n        {\n            new_history.addUnit(unit);\n        }\n\n        for each (unit in _history2.units)\n        {\n            new_history.addUnit(unit);\n        }\n\n        for each (unit in _history3.units)\n        {\n            new_history.addUnit(unit);\n        }\n\n        return new_history;\n    }\n\n    public function sortUnitsByStartTime():void\n    {\n        __units = __units.sort(sortCompareUnitStartTime);\n    }\n\n    private function sortCompareUnitStartTime(_unit1:WwDrawingHistoryUnit, _unit2:WwDrawingHistoryUnit):Number\n    {\n        return _unit1.startTime - _unit2.startTime;\n    }\n\n    public function debugTime():String\n    {\n        var result:String = \"History: \" + __id + \": start: \" + __startTime + \", duration: \" + __duration + \", end: \" + (__startTime + __duration) + \"\\n\";\n        for each (var _unit:WwDrawingHistoryUnit in __units)\n        {\n            result += _unit.debugTime();\n        }\n        return result;\n    }\n\n    public function concatAllCommands(_layer:String=null):WwDrawingHistoryUnit\n    {\n        var _unit:WwDrawingHistoryUnit = new WwDrawingHistoryUnit();\n\n        for each (var temp_unit:WwDrawingHistoryUnit in __units)\n        {\n            if (temp_unit)\n            {\n                for each (var temp_command:WwDrawingHistoryBrushCommand in temp_unit.commands)\n                {\n                    if (__startTime == 0)\n                    {\n                        __startTime = temp_command.executionTime;\n                    }\n                    else\n                    {\n                        __startTime = Math.min(__startTime, temp_command.executionTime);\n                    }\n                    __duration = Math.max(__duration, temp_command.executionTime);\n                    if (_layer)\n                    {\n                        if (_layer == temp_command.layerID)\n                        {\n                            _unit.addCommand(temp_command, false, false);//, false, false);\n                        }\n                    }\n                    else\n                    {\n                        _unit.addCommand(temp_command, false, false);//, false, false);\n                    }\n                }\n            }\n        }\n\n        return _unit;\n    }\n\n    public function deleteUnitsByLayerID(_id:String):void\n    {\n        var _new_unit_list:Vector.<WwDrawingHistoryUnit> = new Vector.<WwDrawingHistoryUnit>;\n\n        for each (var temp_unit:WwDrawingHistoryUnit in __units)\n        {\n            if (temp_unit)\n            {\n                if (temp_unit.layerID != _id)\n                {\n                    _new_unit_list.push(temp_unit);\n                }\n                else\n                {\n                    temp_unit.dispose();\n                }\n            }\n        }\n\n        __units = _new_unit_list;\n    }\n\n*/\n\n/*\n\n    public function get json():Object\n    {\n        __json = new Object();\n        __json.id = __id;\n        __json.start = startTime;\n        __json.end = duration;\n        __json.scale = WwDeviceInfo.instance.assetScaleFactor;\n\n        // units\n        var _units:Array = new Array();\n        for each (var _unit:WwDrawingHistoryUnit in __units)\n        {\n            _units.push(_unit.json);\n        }\n        __json.units = _units;\n\n        // sessions\n        var _sessions:Array = [];\n        for each (var _session:WwDrawingHistorySession in __sessions)\n        {\n            _sessions.push(_session.json);\n        }\n        __json.sessions = _sessions;\n\n        // add redundant stats - most recent - for inclusion in fdl\n        __json.stats = _session.stats.json;\n\n        return __json;\n    }\n\n    public function reset():void\n    {\n        __units = new Vector.<WwDrawingHistoryUnit>;\n        __startTime = 0;\n    }\n\n    public function debug():void\n    {\n        //__debug.clear();\n        __debug.msg(\"History: debug: \" + __units.length, \"1\");\n        for each (var temp_unit:WwDrawingHistoryUnit in __units)\n        {\n            __debug.msg(\"  \" + temp_unit.startTime, \"1\");\n        }\n    }\n\n    public function dispose():void\n    {\n        for each (var _unit:WwDrawingHistoryUnit in __units)\n        {\n            _unit.dispose();\n        }\n        __units = null;\n    }\n\n    public function get units():Vector.<WwDrawingHistoryUnit>\n{\n        return __units\n}\n\npublic function set units(_units:Vector.<WwDrawingHistoryUnit>):void\n{\n    __units = _units;\n}\n\npublic function get unitCount():int\n{\n    return __units.length;\n}\n\n\npublic function get startTime():int\n{\n    return __startTime;\n}\n\npublic function get timeScale():Number\n{\n    return __timeScale;\n}\n\npublic function set timeScale(value:Number):void\n{\n    __timeScale = value;\n    for each (var temp_unit:WwDrawingHistoryUnit in __units)\n    {\n        temp_unit.timeScale = __timeScale;\n    }\n}\n\npublic function get scaledDuration():int\n{\n    return __duration * __timeScale;\n}\n\npublic function get duration():int\n{\n    return __duration;\n}\n\npublic function set duration(value:int):void\n{\n    __duration = value;\n}\n\npublic function get unitLineLength():Number\n{\n    return __unitLineLength;\n}\n\npublic function get sessions():Vector.<WwDrawingHistorySession>\n{\n    return __sessions;\n}\n\npublic function set sessions(value:Vector.<WwDrawingHistorySession>):void\n{\n    __sessions = value;\n}\n\n\n}\n}\n */"],"sourceRoot":"/source/"}