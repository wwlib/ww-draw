{"version":3,"sources":["ww-drawing-history-brush-command.js"],"names":[],"mappings":"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","file":"ww-drawing-history-brush-command.js","sourcesContent":["/**\n * Created by andrew on 7/7/15.\n */\n\n/**\n * ...\n * @author Andrew Rapo (andrew@worthwhilegames.org)\n * @license MIT\n */\n\nimport Point from './point';\nimport getTimer from './get-timer';\nimport WwBrush from './ww-brush';\nimport WwDrawingBrushManager from './ww-drawing-brush-manager';\n\n\nclass WwDrawingHistoryBrushCommand {\n    constructor(brush_id, location_point, time=null, uint_color=null, brush_scale=1.0, expansion_factor=1.0, blend_mode=\"normal\", alpha=1.0, rotation=0, layer_id=\"UNDER\", generated=false) {\n\n        this._brushId = brush_id;\n        this._location = location_point;\n        this._color = uint_color;\n        this._brushScale = brush_scale;\n        this.brushExpansionFactor = expansion_factor;\n        this.brushBlendMode = blend_mode;\n        this.executionTime = time;\n        this.brushAlpha = alpha;\n        this.brushRotation =rotation;\n        this.layerId = layer_id;\n        this.generatedCommand = generated;\n        this.offset = new Point();\n        this.scale = 1.0;\n\n        this.lineLength = 0; //the line length up to this point, from the start of the unit\n        this.prevCommand = null;\n        this.rendered = false;\n\n        this.unitId = null;\n        this.timeScale = 1.0;\n        this._brush = null;\n\n        if (this.executionTime === null) {\n            this.executionTime = 0; //getTimer();\n        }\n        this.normalizedExecutionTime = this.executionTime;\n    }\n\n    onReady() {\n        this.centerPivot();\n        super.onReady();\n\n        //__img.blendMode = BlendMode.NORMAL;\n        //__img.color = __color;\n    }\n\n    get brush()\n    {\n        this._brush = WwDrawingBrushManager.instance.getBrushFromBrushId(this._brushId);\n\n        if (this._brush)\n        {\n            this._brush.scale = this._brushScale * this.brushExpansionFactor * this.scale;\n\n            /*\n            switch(this.brushBlendMode)\n            {\n                case \"erase\": this._brush.image.blendMode = BlendMode.ERASE;\n                    break;\n\n                case \"normal\": this._brush.image.blendMode = BlendMode.NORMAL;\n                    break;\n\n                default: this._brush.image.blendMode = BlendMode.NORMAL;\n                    break;\n            }\n            */\n\n            this._brush.color = this._color;\n            this._brush.rotation = this.brushRotation;\n            this._brush.x = this._location.x * this.scale + this.offset.x;\n            this._brush.y = this._location.y * this.scale + this.offset.y;\n            this._brush.alpha = this.brushAlpha;\n        }\n\n        return this._brush;\n    }\n\n    get brushId()\n    {\n        return this._brushId;\n    }\n\n    set brushId(value)\n    {\n        this._brushId = value;\n    }\n\n    get location()\n    {\n        return this._location;\n    }\n\n    set location(value)\n    {\n        this._location = value;\n    }\n\n    get color()\n    {\n        return this._color;\n    }\n\n    set color(value)\n    {\n        this._color = value;\n    }\n\n    get brushScale()\n    {\n        return this._brushScale;\n    }\n\n    set brushScale(value)\n    {\n        this._brushScale = value;\n    }\n\n    toString()\n    {\n        let result = `WwDrawingHistoryBrushCommand\\n`;\n        result += `${this._brushId}\\n`;\n        result += `${this.unitId}\\n`;\n        result += `${this._location}\\n`;\n        result += `${this._color}\\n`;\n        result += `${this._brushScale}\\n`;\n        result += `${this.brushExpansionFactor}\\n`;\n        result += `${this.brushBlendMode}\\n`;\n        result += `${this.executionTime}\\n`;\n        result += `${this.brushAlpha}\\n`;\n        result += `${this.brushRotation}\\n`;\n        result += `${this.timeScale}\\n`;\n        result += `${this.layerId}\\n`;\n        result += `${this.generatedCommand}\\n`;\n        result += `${this._brush}\\n`;\n\n        return result;\n    }\n\n    toStringMin() {\n\n        return `Cmd: ${this.unitId}: ${this.layerId}: ${this.executionTime}`;\n    }\n\n    // Update Methods\n\n    updateBrushId(value)\n    {\n        if (value) { this.brushId = value; return value }\n        else { return this.brushId }\n    }\n\n    updateUintColor(value)\n    {\n        if (value) { this.uintColor = value; return value }\n        else { return this.uintColor }\n    }\n\n    updateUnitId(value)\n    {\n        if (value) { this.unitId = value; return value }\n        else { return this.unitId }\n    }\n\n    updateLayerId(value)\n    {\n        if (value) { this.layerId = value; return value }\n        else { return this.layerId }\n    }\n\n    updateExecutionTime(value)\n    {\n        if (value != undefined) { this.executionTime = value; return value }\n        else { return this.executionTime }\n    }\n\n    updateBrushScale(value)\n    {\n        if (value) { this.brushScale = value; return value }\n        else { return this.brushScale }\n    }\n\n    updateBlendMode(value)\n    {\n        if (value) { this.brushBlendMode = value; return value }\n        else { return this.brushBlendMode }\n    }\n\n    updateBrushAlpha(value)\n    {\n        if (value) { this.brushAlpha = value; return value }\n        else { return this.brushAlpha }\n    }\n\n    updateBrushRotation(value)\n    {\n        if (value) { this.brushRotation = value; return value }\n        else { return this.brushRotation }\n    }\n\n    updateX(value)\n    {\n        if (!this._location) { this._location = new Point(0,0); }\n\n        if (value) { this._location.x = value; return value }\n        else { return this._location.x }\n    }\n\n    updateY(value)\n    {\n        if (!this._location) { this._location = new Point(0,0); }\n\n        if (value) { this._location.y = value; return value }\n        else { return this._location.y }\n    }\n\n    //Redundancy Methods\n\n    checkRedundancyOfBrushId(data_object, property, value)\n    {\n        if (value == this.brushId) { }\n        else { this.brushId = value; data_object[property] = this.brushId }\n    }\n\n    checkRedundancyOfUintColor(data_object, property, value)\n    {\n        if (value == this.uintColor) { }\n        else { this.uintColor = value; data_object[property] = this.uintColor }\n    }\n\n    checkRedundancyOfUnitId(data_object, property, value)\n    {\n        if (value == this.unitId) { }\n        else { this.unitId = value; data_object[property] = this.unitId }\n    }\n\n    checkRedundancyOfLayerId(data_object, property, value)\n    {\n        if (value == this.layerId) { }\n        else { this.layerId = value; data_object[property] = this.layerId }\n    }\n\n    checkRedundancyOfExecutionTime(data_object, property, value)\n    {\n        //always include time parameter. SAR:150619\n        if (false && value == this.executionTime) { }\n        else { this.executionTime = value; data_object[property] = this.executionTime }\n    }\n\n    checkRedundancyOfBrushScale(data_object, property, value)\n    {\n        if (value == this.brushScale) { }\n        else { this.brushScale = value; data_object[property] = this.brushScale }\n    }\n\n    checkRedundancyOfBrushBlendMode(data_object, property, value)\n    {\n        if (value == this.brushBlendMode) { }\n        else { this.brushBlendMode = value; data_object[property] = this.brushBlendMode }\n    }\n\n    checkRedundancyOfBrushAlpha(data_object, property, value)\n    {\n        if (value == this.brushAlpha) { }\n        else { this.brushAlpha = value; data_object[property] = this.brushAlpha }\n    }\n\n    checkRedundancyOfBrushRotation(data_object, property, value)\n    {\n        if (value == this.brushRotation) { }\n        else { this.brushRotation = value; data_object[property] = this.brushRotation }\n    }\n\n    checkRedundancyOfGeneratedCommand(data_object, property, value)\n    {\n        if (value == this.generatedCommand) { }\n        else { this.generatedCommand = value; data_object[property] = this.generatedCommand }\n    }\n\n    checkRedundancyOfX(data_object, property, value)\n    {\n        if (!this._location) { this._location = new Point(0,0); }\n\n        if (value == this._location.x) { }\n        else { this._location.x = value; data_object[property] = this._location.x }\n    }\n\n    checkRedundancyOfY(data_object, property, value)\n    {\n        if (!this._location) { this._location = new Point(0,0); }\n\n        if (value == this._location.y) { }\n        else { this._location.y = value; data_object[property] =  this._location.y }\n    }\n\n    static clone(_command, data_object=null)\n    {\n        var _clone = new WwDrawingHistoryBrushCommand(_command.brushId, new Point(_command.location.x, _command.location.y));\n\n        //_clone.location = new Point(_command.location.x, _command.location.y);\n        _clone.uintColor = _command.uintColor;\n        _clone.brushScale = _command.brushScale;\n        _clone.brushExpansionFactor = _command.brushExpansionFactor;\n        _clone.brushBlendMode = _command.brushBlendMode;\n        _clone.executionTime = _command.executionTime;\n        _clone.brushAlpha = _command.brushAlpha;\n        _clone.brushRotation = _command.brushRotation;\n        _clone.timeScale = _command.timeScale;\n        _clone.layerId = _command.layerId;\n        _clone.generatedCommand = _command.generatedCommand;\n        _clone.unitId = _command.unitId;\n        _clone.offset = _command.offset;\n        _clone.scale = _command.scale;\n\n        if (data_object) {\n            _clone.updateUnitId(data_object.uid);\n            _clone.updateBrushId(data_object.bid);\n            _clone.updateX(data_object.x);\n            _clone.updateY(data_object.y);\n            _clone.updateExecutionTime(data_object.t);\n            _clone.updateUintColor(data_object.c);\n            _clone.updateBrushScale(data_object.s);\n            _clone.updateBlendMode(data_object.bm);\n            _clone.updateBrushAlpha(data_object.a);\n            _clone.updateBrushRotation(data_object.r);\n            _clone.updateLayerId(data_object.lid);\n        }\n\n        return _clone;\n    }\n\n    dispose()\n    {\n        this._brush = null;\n        this._location = null;\n    }\n}\n\nexport default WwDrawingHistoryBrushCommand;\n\n/*\nimport flash.utils.getTimer;\n\nimport org.wwlib.starling.WwBrush;\nimport org.wwlib.utils.WwDebug;\n\nimport starling.display.BlendMode;\n\n\n    public class WwDrawingHistoryBrushCommand\n    {\n        private var __debug:WwDebug;\n        private var __brushID:String;\n        private var __brush:WwBrush;\n        private var __location:Point;\n        private var __uintColor:uint;\n        private var __brushScale:Number;\n        private var __brushExpansionFactor:Number = 1.0;\n        private var __brushBlendMode:String;\n        private var __executionTime:int;\n        private var __normalizedExecutionTime:int;\n        private var __brushAlpha:Number;\n        private var __brushRotation:Number;\n        private var __timeScale:Number = 1.0;\n        private var __layerID:String;\n        private var __generatedCommand:Boolean;\n        private var __unitID:int;\n        private var __lineLength:Number = 0;\n        private var __prevCommand:WwDrawingHistoryBrushCommand = null;\n        private var __rendered:Boolean = false;\n\n        private var __json:Object = null;\n\n        public function WwDrawingHistoryBrushCommand(_brushID:String, _location:Point=null, _uint_color:uint=0, _brush_scale:Number=1.0, _expansion_factor:Number=1.0, _blend_mode:String=\"normal\", _time:int=0, _alpha:Number=1.0, _rotation:Number=0, _layerID:String=\"UNDER\", _generated:Boolean=false):void\n    {\n        __debug = WwDebug.instance;\n        __brushID = _brushID;\n        __location = _location;\n        __uintColor = _uint_color;\n        __brushScale = _brush_scale;\n        __brushExpansionFactor = _expansion_factor;\n        __brushBlendMode = _blend_mode;\n        __executionTime = _time;\n        __brushAlpha = _alpha;\n        __brushRotation = _rotation;\n        __layerID = _layerID;\n        __generatedCommand = _generated;\n\n        if (__executionTime == 0) __executionTime = getTimer();\n        __normalizedExecutionTime = __executionTime;\n    }\n\n    public static function clone(_command:WwDrawingHistoryBrushCommand):WwDrawingHistoryBrushCommand\n    {\n        var _clone:WwDrawingHistoryBrushCommand = new WwDrawingHistoryBrushCommand(_command.brushID);\n\n        _clone.location = _command.location;\n        _clone.uintColor = _command.uintColor;\n        _clone.brushScale = _command.brushScale;\n        _clone.brushExpansionFactor = _command.brushExpansionFactor;\n        _clone.brushBlendMode = _command.brushBlendMode;\n        _clone.executionTime = _command.executionTime;\n        _clone.brushAlpha = _command.brushAlpha;\n        _clone.brushRotation = _command.brushRotation;\n        _clone.timeScale = _command.timeScale;\n        _clone.layerID = _command.layerID;\n        _clone.generatedCommand = _command.generatedCommand;\n        _clone.unitID = _command.unitID;\n        //_clone.lineLength = _command.lineLength;\n        //_clone.prevCommand = _command.prevCommand;\n        //_clone.rendered = _command.rendered;\n\n        return _clone;\n    }\n\n    public function dispose():void\n{\n    __brush = null;\n    __debug = null;\n    __location = null;\n}\n\npublic function debug():void\n    {\n        __debug.msg(\"Command: \" + __brushID, \"1\");\n__debug.msg(\" \" + __unitID, \"1\");\n__debug.msg(\" \" + __location, \"1\");\n__debug.msg(\" \" + __uintColor, \"1\");\n__debug.msg(\" \" + __brushScale, \"1\");\n__debug.msg(\" \" + __brushExpansionFactor, \"1\");\n__debug.msg(\" \" + __brushBlendMode, \"1\");\n__debug.msg(\" \" + __executionTime, \"1\");\n__debug.msg(\" \" + __brushAlpha, \"1\");\n__debug.msg(\" \" + __brushRotation, \"1\");\n__debug.msg(\" \" + __timeScale, \"1\");\n__debug.msg(\" \" + __layerID, \"1\");\n__debug.msg(\" \" + __generatedCommand, \"1\");\n__debug.msg(\" \" + __brush, \"1\");\n}\n\npublic function debugTime():String\n{\n    return \"  Command: \" + __unitID + \": \" + __executionTime + \"\\n\";\n}\n\npublic function get xml():String\n{\n    return \"  <command uid=\\\"\" + unitID + \"\\\" lid=\\\"\" + layerID + \"\\\" t=\\\"\" + __executionTime + \"\\\" bid=\\\"\" + __brushID + \"\\\" c=\\\"\" + __uintColor + \"\\\" s=\\\"\" + __brushScale + \"\\\" bm=\\\"\" + __brushBlendMode + \"\\\" a=\\\"\" + __brushAlpha + \"\\\" r=\\\"\" + __brushRotation + \"\\\" g=\\\"\" + __generatedCommand + \"\\\" x=\\\"\" + __location.x + \"\\\" y=\\\"\" + __location.y + \"\\\" />\\n\";\n}\n\npublic function get json():Object\n{\n    __json = new Object();\n    __json.uid = unitID;\n    __json.lid = layerID;\n    __json.t = __executionTime;\n    __json.bid = __brushID;\n    __json.c = __uintColor;\n    __json.s = __brushScale;\n    __json.bm = __brushBlendMode;\n    __json.a = __brushAlpha;\n    __json.r = __brushRotation;\n    __json.g = __generatedCommand;\n    __json.x = __location.x;\n    __json.y = __location.y;\n\n    return __json;\n}\n\npublic function setCurrentTime():void\n{\n    __executionTime = getTimer();\n}\n\npublic function get brush():WwBrush\n{\n    __brush = WwDrawingBrushManager.instance.getBrushFromBrushID(__brushID);\n\n    if (__brush)\n    {\n        __brush.brushScale = __brushScale * __brushExpansionFactor;\n\n        switch(__brushBlendMode)\n        {\n            case \"erase\": __brush.image.blendMode = BlendMode.ERASE;\n                break;\n\n            case \"normal\": __brush.image.blendMode = BlendMode.NORMAL;\n                break;\n\n            default: __brush.image.blendMode = BlendMode.NORMAL;\n                break;\n        }\n\n        __brush.image.color = __uintColor;\n        __brush.image.rotation = __brushRotation;\n        __brush.image.x = __location.x;\n        __brush.image.y = __location.y;\n        __brush.image.alpha = __brushAlpha;\n    }\n\n    return __brush;\n}\n\npublic function get brushID():String\n{\n    return __brushID;\n}\n\npublic function set brushID(value:String):void\n{\n    __brushID = value;\n}\n\n\npublic function get location():Point\n{\n    return __location;\n}\n\npublic function set location(value:Point):void\n{\n    __location = value;\n}\n\npublic function get uintColor():uint\n{\n    return __uintColor;\n}\n\npublic function set uintColor(value:uint):void\n{\n    __uintColor = value;\n}\n\npublic function get brushScale():Number\n{\n    return __brushScale;\n}\n\npublic function set brushScale(value:Number):void\n{\n    __brushScale = value;\n}\n\npublic function get brushExpansionFactor():Number\n{\n    return __brushExpansionFactor;\n}\n\npublic function set brushExpansionFactor(value:Number):void\n{\n    __brushExpansionFactor = value;\n}\n\npublic function get brushBlendMode():String\n{\n    return __brushBlendMode;\n}\n\npublic function set brushBlendMode(value:String):void\n{\n    __brushBlendMode = value;\n}\n\npublic function get executionTime():int\n{\n    return __executionTime;\n}\n\npublic function set executionTime(value:int):void\n{\n    __executionTime = value;\n__normalizedExecutionTime = value;\n}\n\npublic function get scaledExecutionTime():int\n{\n    return __executionTime * __timeScale;\n}\n\npublic function get brushAlpha():Number\n{\n    return __brushAlpha;\n}\n\npublic function set brushAlpha(value:Number):void\n{\n    __brushAlpha = value;\n}\n\npublic function get brushRotation():Number\n{\n    return __brushRotation;\n}\n\npublic function set brushRotation(value:Number):void\n{\n    __brushRotation = value;\n}\n\npublic function get timeScale():Number\n{\n    return __timeScale;\n}\n\npublic function set timeScale(value:Number):void\n{\n    __timeScale = value;\n}\n\npublic function get layerID():String\n{\n    return __layerID;\n}\n\npublic function set layerID(value:String):void\n{\n    __layerID = value;\n}\n\n//NormalizedExecutionTime seems to be the same as regular executionTime\n\npublic function get normalizedExecutionTime():int\n{\n    return __normalizedExecutionTime;\n}\n\n\n\npublic function get scaledNormalizedExecutionTime():int\n{\n    return __normalizedExecutionTime * __timeScale;\n}\n\n\npublic function get generatedCommand():Boolean\n{\n    return __generatedCommand;\n}\n\npublic function set generatedCommand(value:Boolean):void\n{\n    __generatedCommand = value;\n}\n\npublic function get x():Number { return __location.x}\npublic function get y():Number { return __location.y}\n\npublic function get unitID():int\n{\n    return __unitID;\n}\n\npublic function set unitID(value:int):void\n{\n    __unitID = value;\n}\n\npublic function get lineLength():Number\n{\n    return __lineLength;\n}\n\npublic function set lineLength(value:Number):void\n{\n    __lineLength = value;\n}\n\npublic function get prevCommand():WwDrawingHistoryBrushCommand\n{\n    return __prevCommand;\n}\n\npublic function set prevCommand(value:WwDrawingHistoryBrushCommand):void\n{\n    __prevCommand = value;\n}\n\npublic function get rendered():Boolean\n{\n    return __rendered;\n}\n\npublic function set rendered(value:Boolean):void\n{\n    __rendered = value;\n}\n\n// Update Methods\n\npublic function updateBrushId(value:String):String\n{\n    if (value) { __brushID = value; return value }\n    else { return __brushID }\n}\n\npublic function updateUintColor(value:uint):uint\n{\n    if (value) { __uintColor = value; return value }\n    else { return __uintColor }\n}\n\npublic function updateUnitID(value:int):int\n{\n    if (value) { __unitID = value; return value }\n    else { return __unitID }\n}\n\npublic function updateLayerID(value:String):String\n{\n    if (value) { __layerID = value; return value }\n    else { return __layerID }\n}\n\npublic function updateExecutionTime(value:int):int\n{\n    if (value >= 0) { __executionTime = value; return value }\n    else { return __executionTime }\n}\n\npublic function updateBrushScale(value:Number):Number\n{\n    if (value) { __brushScale = value; return value }\n    else { return __brushScale }\n}\n\npublic function updateBlendMode(value:String):String\n{\n    if (value) { __brushBlendMode = value; return value }\n    else { return __brushBlendMode }\n}\n\npublic function updateBrushAlpha(value:Number):Number\n{\n    if (value) { __brushAlpha = value; return value }\n    else { return __brushAlpha }\n}\n\npublic function updateBrushRotation(value:Number):Number\n{\n    if (value) { __brushRotation = value; return value }\n    else { return __brushRotation }\n}\n\npublic function updateX(value:int):int\n{\n    if (!location) { location = new Point(0,0); }\n\n    if (value) { __location.x = value; return value }\n    else { return __location.x }\n}\n\npublic function updateY(value:int):int\n{\n    if (!location) { location = new Point(0,0); }\n\n    if (value) { __location.y = value; return value }\n    else { return __location.y }\n}\n\n\n//Redundancy Methods\n\npublic function checkRedundancyOfBrushID(data_object:Object, property:String, value:String):void\n{\n    if (value == __brushID) { }\nelse { __brushID = value; data_object[property] = __brushID }\n}\n\npublic function checkRedundancyOfUintColor(data_object:Object, property:String, value:uint):void\n{\n    if (value == __uintColor) { }\nelse { __uintColor = value; data_object[property] = __uintColor }\n}\n\npublic function checkRedundancyOfUnitID(data_object:Object, property:String, value:int):void\n{\n    if (value == __unitID) { }\nelse { __unitID = value; data_object[property] = __unitID }\n}\n\npublic function checkRedundancyOfLayerID(data_object:Object, property:String, value:String):void\n{\n    if (value == __layerID) { }\nelse { __layerID = value; data_object[property] = __layerID }\n}\n\npublic function checkRedundancyOfExecutionTime(data_object:Object, property:String, value:int):void\n{\n    //always include time parameter. SAR:150619\n    if (false && value == __executionTime) { }\nelse { __executionTime = value; data_object[property] = __executionTime }\n}\n\npublic function checkRedundancyOfBrushScale(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushScale) { }\nelse { __brushScale = value; data_object[property] = __brushScale }\n}\n\npublic function checkRedundancyOfBrushBlendMode(data_object:Object, property:String, value:String):void\n{\n    if (value == __brushBlendMode) { }\nelse { __brushBlendMode = value; data_object[property] = __brushBlendMode }\n}\n\npublic function checkRedundancyOfBrushAlpha(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushAlpha) { }\nelse { __brushAlpha = value; data_object[property] = __brushAlpha }\n}\n\npublic function checkRedundancyOfBrushRotation(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushRotation) { }\nelse { __brushRotation = value; data_object[property] = __brushRotation }\n}\n\npublic function checkRedundancyOfGeneratedCommand(data_object:Object, property:String, value:Boolean):void\n{\n    if (value == __generatedCommand) { }\nelse { __generatedCommand = value; data_object[property] = __generatedCommand }\n}\n\npublic function checkRedundancyOfX(data_object:Object, property:String, value:Number):void\n{\n    if (!location) { location = new Point(0,0); }\n\nif (value == __location.x) { }\nelse { __location.x = value; data_object[property] = __location.x }\n}\n\npublic function checkRedundancyOfY(data_object:Object, property:String, value:Number):void\n{\n    if (!location) { location = new Point(0,0); }\n\nif (value == __location.y) { }\nelse { __location.y = value; data_object[property] =  __location.y }\n}\n}\n}\n\n*/"],"sourceRoot":"/source/"}