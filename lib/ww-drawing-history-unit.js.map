{"version":3,"sources":["ww-drawing-history-unit.js"],"names":[],"mappings":"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","file":"ww-drawing-history-unit.js","sourcesContent":["/**\n * Created by andrew on 8/13/15.\n */\n\n/**\n * ...\n * @author Andrew Rapo (andrew@worthwhilegames.org)\n * @license MIT\n */\n\nimport Point from './point';\nimport getTimer from './get-timer';\nimport WwDrawingHistoryDataTranslator from './ww-drawing-history-data-translator';\n\n\nclass WwDrawingHistoryUnit {\n    constructor() {\n        this.id = -1;\n        this.commands = [];\n        this.timeScale = 1.0;\n        this.layerId = null;\n        this.lineLength = 0;\n        this.prevCommand = null;\n        this.startTime = 0;\n        this.duration = 0;\n        this.sessionId = 0;\n\n        this.currentCommandIndex = 0;\n    }\n\n    toString()\n    {\n        var result:String = \" Unit: \" + this.id + \": start: \" + this.startTime + \", duration: \" + this.duration + \", end: \" + (this.startTime + this.duration) + \"\\n\";\n        this.commands.forEach(temp_command => {\n            result += `  Command: ${temp_command.unitId}: ${temp_command.executionTime} (${temp_command.location.x}, ${temp_command.location.y})\\n`;\n        });\n        return result;\n    }\n\n    addCommand(_command, adjust_time_to_unit_time=true, link_prev_command=true)\n    {\n\n        this.commands.push(_command);\n        if (this.prevCommand)\n        {\n            this.lineLength += Point.distance(this.prevCommand.location, _command.location);\n            _command.lineLength = this.lineLength;\n            if (link_prev_command)\n            {\n                _command.prevCommand = this.prevCommand;\n            }\n        } else {\n            this.startTime = _command.executionTime;\n        }\n\n        this.layerId = _command.layerId;\n        this.prevCommand = _command;\n\n        if (!_command.unitId) {\n            _command.unitId = this.id;\n        }\n\n        if (adjust_time_to_unit_time)\n        {\n            _command.executionTime -= this.startTime;\n        }\n\n        this.duration = Math.max(this.duration, _command.executionTime);\n    }\n\n    sortComandsByExecutionTime()\n    {\n        this.commands = this.commands.sort(this.sortCompareExecutionTime);\n    }\n\n    sortCompareExecutionTime(_command1, _command2)\n    {\n        return _command1.executionTime - _command2.executionTime;\n    }\n\n    get json()\n    {\n        let json = new Object();\n        json.id = this.id;\n        json.start = startTime;\n        json.dur = duration;\n        json.end = startTime + duration;\n        json.lid = this.layerId;\n        json.ses = this.sessionId;\n\n        var _commands = [];\n\n        var dataTranslator = new WwDrawingHistoryDataTranslator();\n\n        this.commands.forEach(_command => {\n\n            var data_object:Object;\n            data_object = dataTranslator.generateDataObjectWithCommand(_command);\n            _commands.push(data_object);//(_command.json);\n        });\n\n        json.commands = _commands;\n\n        return json;\n    }\n\n    hasNext() {\n        return (this.currentCommandIndex + 1) < this.commands.length;\n    }\n\n    hasNextInTimeRange(start_time, end_time) {\n        let next_command = null;\n        let next_command_index = this.currentCommandIndex + 1;\n\n        if (next_command_index < this.commands.length) {\n            next_command =  this.commands[next_command_index];\n            let next_command_time = next_command.executionTime;\n            if (next_command_time >= start_time && next_command_time < end_time) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    next() {\n        let next_command = null;\n\n        this.currentCommandIndex++;\n        if (this.currentCommandIndex < this.commands.length) {\n            next_command = this.commands[this.currentCommandIndex];\n        }\n        return next_command;\n    }\n\n    nextInTimeRange(start_time, end_time) {\n        let next_command = null;\n        let next_command_index = this.currentCommandIndex + 1;\n\n        if (next_command_index < this.commands.length) {\n            next_command =  this.commands[next_command_index];\n            let next_command_time = next_command.executionTime;\n            if (next_command_time >= start_time && next_command_time < end_time) {\n                this.currentCommandIndex++;\n            } else {\n                next_command = null;\n            }\n        }\n        return next_command;\n    }\n\n}\n\nexport default WwDrawingHistoryUnit;\n\n/*\n\n package org.wwlib.drawing\n {\n import flash.geom.Point;\n import flash.utils.getTimer;\n\n import org.wwlib.utils.WwDebug;\n\n\npublic class WwDrawingHistoryUnit\n{\n    private var __debug:WwDebug;\n    private var __id:int = -1;\n    private var __commands:Vector.<WwDrawingHistoryBrushCommand>;\n    private var __timeScale:Number = 1.0;\n    private var __layerID:String;\n    private var __lineLength:Number = 0;\n    private var __prevCommand:WwDrawingHistoryBrushCommand = null;\n    private var __startTime:int = 0;\n    private var __duration:int = 0;\n    private var __sessionID:int = 0;\n\n    private var __json:Object = null;\n\n    public function WwDrawingHistoryUnit()\n    {\n        __debug = WwDebug.instance;\n        __commands = new Vector.<WwDrawingHistoryBrushCommand>;\n    }\n\n    public function addCommand(_command:WwDrawingHistoryBrushCommand, adjust_time_to_unit_time:Boolean=true, link_prev_command:Boolean=true):void\n    {\n        if (__startTime == 0)\n        {\n            __startTime = getTimer();\n        }\n        __commands.push(_command);\n        if (__prevCommand)\n        {\n            __lineLength += Point.distance(__prevCommand.location, _command.location);\n            _command.lineLength = __lineLength;\n            if (link_prev_command)\n            {\n                _command.prevCommand = __prevCommand;\n            }\n        }\n        __layerID = _command.layerID;\n        __prevCommand = _command;\n\n        if (adjust_time_to_unit_time)\n        {\n            _command.executionTime -= __startTime;\n        }\n\n        __duration = Math.max(__duration, _command.executionTime);\n    }\n\n    public static function MERGE_UNITS(_unit1:WwDrawingHistoryUnit, _unit2:WwDrawingHistoryUnit):WwDrawingHistoryUnit\n    {\n        var _merged_unit:WwDrawingHistoryUnit = new WwDrawingHistoryUnit();\n        var temp_command:WwDrawingHistoryBrushCommand;\n\n        for each (temp_command in _unit1.commands)\n        {\n            _merged_unit.addCommand(temp_command);\n        }\n\n        for each (temp_command in _unit2.commands)\n        {\n            _merged_unit.addCommand(temp_command);\n        }\n\n        return _merged_unit;\n    }\n\n    public function debugTime():String\n    {\n        var result:String = \" Unit: \" + __id + \": start: \" + __startTime + \", duration: \" + duration + \", end: \" + (__startTime + duration) + \"\\n\";\n        for each (var temp_command:WwDrawingHistoryBrushCommand in __commands)\n        {\n            result += temp_command.debugTime();\n        }\n        return result;\n    }\n\n    public function sortComandsByExecutionTime():void\n    {\n        __commands = __commands.sort(sortCompareExecutionTime);\n    }\n\n    public function sortCompareExecutionTime(_command1:WwDrawingHistoryBrushCommand, _command2:WwDrawingHistoryBrushCommand):Number\n    {\n        return _command1.executionTime - _command2.executionTime;\n    }\n\n    public function filterCommandsByLayerID(_layerID):WwDrawingHistoryUnit\n    {\n        var _filtered_unit:WwDrawingHistoryUnit = new WwDrawingHistoryUnit();\n        var temp_command:WwDrawingHistoryBrushCommand;\n\n        for each (temp_command in __commands)\n        {\n            if (temp_command.layerID == _layerID)\n            {\n                _filtered_unit.addCommand(temp_command);\n            }\n        }\n\n        return _filtered_unit;\n    }\n\n    public function get commands():Vector.<WwDrawingHistoryBrushCommand>\n{\n        return __commands\n}\n\npublic function dispose():void\n{\n    for each (var _command:WwDrawingHistoryBrushCommand in __commands)\n    {\n        _command.dispose();\n    }\n    __commands = null;\n}\n\npublic function get startTime():int {return __startTime}\npublic function set startTime(_time:int):void\n{\n    __startTime = _time;\n}\n\npublic function get scaledStartTime():int\n{\n    return startTime * __timeScale;\n}\n\npublic function get duration():int\n{\n    if (__duration ==0)\n    {\n        var _end_time:int = 0;\n        for each (var _command:WwDrawingHistoryBrushCommand in __commands)\n        {\n            _end_time = Math.max(_end_time, _command.executionTime);\n        }\n        __duration = _end_time;\n        return __duration;\n    }\n    else\n    {\n        return __duration;\n    }\n\n}\n\npublic function set duration(_time:int):void\n{\n    __duration = _time;\n}\n\npublic function get scaledDuration():int\n{\n    return duration * __timeScale;\n}\n\npublic function get timeScale():Number\n{\n    return __timeScale;\n}\n\npublic function set timeScale(value:Number):void\n{\n    __timeScale = value;\n    for each (var _command:WwDrawingHistoryBrushCommand in __commands)\n    {\n        _command.timeScale = __timeScale;\n    }\n}\n\npublic function get json():Object\n{\n    __json = new Object();\n    __json.id = __id;\n    __json.start = startTime;\n    __json.dur = duration;\n    __json.end = startTime + duration;\n    __json.lid = __layerID;\n    __json.ses = __sessionID;\n\n    var _commands:Array = new Array();\n\n    var dataTranslator:WwDrawingHistoryDataTranslator = new WwDrawingHistoryDataTranslator();\n\n\n    for each (var _command:WwDrawingHistoryBrushCommand in __commands)\n    {\n        var data_object:Object;\n        data_object = dataTranslator.generateDataObjectWithCommand(_command);\n        _commands.push(data_object);//(_command.json);\n    }\n\n    __json.commands = _commands;\n\n    return __json;\n}\n\npublic function get layerID():String\n{\n    return __layerID;\n}\n\npublic function set layerID(value:String):void\n{\n    __layerID = value;\n}\n\npublic function get id():int\n{\n    return __id;\n}\n\npublic function set id(value:int):void\n{\n    __id = value;\n}\n\npublic function get lineLength():Number\n{\n    return __lineLength;\n}\n\npublic function set lineLength(value:Number):void\n{\n    __lineLength = value;\n}\n\npublic function get prevCommand():WwDrawingHistoryBrushCommand\n{\n    return __prevCommand;\n}\n\npublic function set prevCommand(value:WwDrawingHistoryBrushCommand):void\n{\n    __prevCommand = value;\n}\n\npublic function get sessionID():int\n{\n    return __sessionID;\n}\n\npublic function set sessionID(value:int):void\n{\n    __sessionID = value;\n}\n\n\n}\n}\n */"],"sourceRoot":"/source/"}