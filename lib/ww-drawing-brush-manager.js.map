{"version":3,"sources":["ww-drawing-brush-manager.js"],"names":[],"mappings":"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","file":"ww-drawing-brush-manager.js","sourcesContent":["/**\n * Created by andrew on 8/13/15.\n */\n\n/**\n * ...\n * @author Andrew Rapo (andrew@worthwhilegames.org)\n * @license MIT\n */\n\nimport WwBrush from'./ww-brush';\n\nclass WwDrawingBrushManager {\n    constructor() {\n        this.brushIdArray = [];\n        this.brushURLs = {};\n        this.brushes = {};\n        this.brushesLoadedCount = 0;\n    }\n\n    static get instance() {\n        if (!WwDrawingBrushManager._instance) {\n            WwDrawingBrushManager._instance = new WwDrawingBrushManager();\n        }\n\n        return WwDrawingBrushManager._instance;\n    }\n\n    init(callback=null)\n    {\n        this.callback = callback;\n        this.brushIdArray = [];\n        this.brushURLs = {};\n        this.brushes = {};\n        this.brushesLoadedCount = 0;\n\n        this.brushIdArray[0] = \"hard\";\n        this.brushIdArray[1] = \"soft\";\n        this.brushIdArray[2] = \"crayon\";\n        this.brushIdArray[3] = \"calligraphy\";\n        this.brushIdArray[4] = \"pencil\";\n        this.brushIdArray[5] = \"circleSoft\";\n        this.brushIdArray[6] = \"star\";\n\n        this.brushURLs[\"hard\"] = \"./images/brushes/brush_hard_blue.png\";\n        this.brushURLs[\"soft\"] = \"./images/brushes/brush_soft.png\";\n        this.brushURLs[\"crayon\"] = \"./images/brushes/brush_crayon.png\";\n        this.brushURLs[\"calligraphy\"] = \"./images/brushes/brush_calligraphy.png\";\n        this.brushURLs[\"pencil\"] = \"./images/brushes/brush_pencil.png\";\n        this.brushURLs[\"circleSoft\"] = \"./images/brushes/brush_circleSoft.png\";\n        this.brushURLs[\"star\"] = \"./images/brushes/brush_star.png\"; //,interval_dash\";\n\n        /*\n        this.brushURLs.forEach(_key => {\n            let _brush = new WwBrush();\n            _brush.loadImage(this.brushURLs[_key]);\n            this.brushes[_key] = _brush;\n            //console.log(\"BrushManager: \" + _key + \":\" + this.brushes[_key] + \", \" + this.brushURLs[_key], \"1\");\n        });\n        */\n\n        for (let _key in this.brushURLs) {\n            let _brush = new WwBrush();\n            let onBrushImageLoadedCallback = this.onBrushImageLoaded.bind(this);\n            _brush.loadImageWithURLAndCallback(this.brushURLs[_key], onBrushImageLoadedCallback);\n            this.brushes[_key] = _brush;\n        }\n    }\n\n    onBrushImageLoaded(sprite) {\n        this.brushesLoadedCount++;\n\n        if (this.brushesLoadedCount == this.brushIdArray.length) {\n            if (this.callback) {\n                this.callback(this.brushes);\n                this.callback = null;\n            }\n        }\n    }\n\n    getBrushFromBrushId(_id)\n    {\n        return this.brushes[_id];\n    }\n\n    getBrushIdWithIndex(index)\n    {\n        return this.brushIdArray[index];\n    }\n\n}\n\nWwDrawingBrushManager._instance = null;\n\nexport default WwDrawingBrushManager;\n\n/*\n\n package org.wwlib.drawing\n {\n import flash.utils.Dictionary;\n\n import org.wwlib.starling.WwBrush;\n import org.wwlib.utils.WwDebug;\n\n\npublic class WwDrawingBrushManager\n{\n    private static var __instance:WwDrawingBrushManager;\n\n    private var __debug:WwDebug;\n    private var __brushIDArray:Array;\n    private var __brushURLs:Dictionary;\n    private var __brushes:Dictionary;\n    //private var __brushBitmaps:Dictionary;\n\n    //private var __debugBrush:WwBrush;\n\n\n    public function WwDrawingBrushManager(enforcer:SingletonEnforcer)\n    {\n        if (!(enforcer is SingletonEnforcer))\n        {\n            throw new ArgumentError(\"QcColoringBrushManager cannot be directly instantiated!\");\n        }\n\n        __debug = WwDebug.instance;\n    }\n\n\n    public static function init():WwDrawingBrushManager\n    {\n        //NOTE: Brush Manager needs to re-initialize whenever a new Starling context is created\n\n        if (__instance != null)\n        {\n            __instance.dispose();\n        }\n\n        __instance = new WwDrawingBrushManager(new SingletonEnforcer());\n        __instance.setup();\n\n        return __instance;\n    }\n\n    public static function get instance(): WwDrawingBrushManager\n    {\n        return __instance;\n    }\n\n    private function setup():void\n    {\n        __brushIDArray = new Array();\n        __brushURLs = new Dictionary();\n        __brushes = new Dictionary();\n\n        __brushIDArray[0] = \"hard\";\n        __brushIDArray[1] = \"soft\";\n        __brushIDArray[2] = \"crayon\";\n        __brushIDArray[3] = \"calligraphy\";\n        __brushIDArray[4] = \"x\";\n        __brushIDArray[5] = \"crosshairs\";\n        __brushIDArray[6] = \"arrow\";\n\n        __brushURLs[\"hard\"] = \"assets/brushes/brush_hard.png\";\n        __brushURLs[\"soft\"] = \"assets/brushes/brush_soft.png\";\n        __brushURLs[\"crayon\"] = \"assets/brushes/brush_crayon.png\";\n        __brushURLs[\"calligraphy\"] = \"assets/brushes/brush_calligraphy.png\";\n        __brushURLs[\"x\"] = \"assets/brushes/brush_x.png\";\n        __brushURLs[\"crosshairs\"] = \"assets/brushes/brush_crosshairs.png\";\n        __brushURLs[\"arrow\"] = \"assets/brushes/brush_arrow.png\"; //,interval_dash\";\n\n        var _key:Object;\n\n        for (_key in __brushURLs)\n        {\n            var _brush:WwBrush = new WwBrush();\n            _brush.loadImage(__brushURLs[_key]);\n            __brushes[_key] = _brush;\n            //__debug.msg(\"BrushManager: \" + _key + \":\" + __brushes[_key] + \", \" + __brushURLs[_key], \"1\");\n        }\n    }\n\n    //Moved to BrushManager from WwDrawingtarling 7/2/2015\n\n\n    public function getBrushFromBrushID(_id:String):WwBrush\n    {\n        return __brushes[_id];\n    }\n\n    public function getBrushIDWithIndex(index:int):String\n    {\n        return __brushIDArray[index];\n    }\n\n    public function get brushIDs():Array\n    {\n        return __brushIDArray;\n    }\n\n    public function get brushURLs():Dictionary\n    {\n        return __brushURLs;\n    }\n\n    public function dispose():void\n    {\n        var brush:WwBrush;\n\n        for each (brush in __brushes)\n        {\n            brush.dispose();\n        }\n\n        __brushIDArray = null;\n        __brushURLs = null;\n        __brushes = null;\n    }\n\n\n//\t\tpublic function get brushBitmaps():Dictionary\n//\t\t{\n//\t\t\treturn __brushBitmaps;\n//\t\t}\n\n\n}\n}\n\n\n */"],"sourceRoot":"/source/"}