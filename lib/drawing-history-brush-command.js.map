{"version":3,"sources":["drawing-history-brush-command.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAUkB,SAAS;;;;AAAC,CAAC","file":"drawing-history-brush-command.js","sourcesContent":["/**\n * Created by andrew on 7/7/15.\n */\n\n/**\n * ...\n * @author Andrew Rapo (andrew@worthwhilegames.org)\n * @license MIT\n */\n\nimport Point from './point';;\n\n/*\nimport flash.utils.getTimer;\n\nimport org.wwlib.starling.WwBrush;\nimport org.wwlib.utils.WwDebug;\n\nimport starling.display.BlendMode;\n\n\n    public class WwDrawingHistoryBrushCommand\n    {\n        private var __debug:WwDebug;\n        private var __brushID:String;\n        private var __brush:WwBrush;\n        private var __location:Point;\n        private var __uintColor:uint;\n        private var __brushScale:Number;\n        private var __brushExpansionFactor:Number = 1.0;\n        private var __brushBlendMode:String;\n        private var __executionTime:int;\n        private var __normalizedExecutionTime:int;\n        private var __brushAlpha:Number;\n        private var __brushRotation:Number;\n        private var __timeScale:Number = 1.0;\n        private var __layerID:String;\n        private var __generatedCommand:Boolean;\n        private var __unitID:int;\n        private var __lineLength:Number = 0;\n        private var __prevCommand:WwDrawingHistoryBrushCommand = null;\n        private var __rendered:Boolean = false;\n\n        private var __json:Object = null;\n\n        public function WwDrawingHistoryBrushCommand(_brushID:String, _location:Point=null, _uint_color:uint=0, _brush_scale:Number=1.0, _expansion_factor:Number=1.0, _blend_mode:String=\"normal\", _time:int=0, _alpha:Number=1.0, _rotation:Number=0, _layerID:String=\"UNDER\", _generated:Boolean=false):void\n    {\n        __debug = WwDebug.instance;\n        __brushID = _brushID;\n        __location = _location;\n        __uintColor = _uint_color;\n        __brushScale = _brush_scale;\n        __brushExpansionFactor = _expansion_factor;\n        __brushBlendMode = _blend_mode;\n        __executionTime = _time;\n        __brushAlpha = _alpha;\n        __brushRotation = _rotation;\n        __layerID = _layerID;\n        __generatedCommand = _generated;\n\n        if (__executionTime == 0) __executionTime = getTimer();\n        __normalizedExecutionTime = __executionTime;\n    }\n\n    public static function clone(_command:WwDrawingHistoryBrushCommand):WwDrawingHistoryBrushCommand\n    {\n        var _clone:WwDrawingHistoryBrushCommand = new WwDrawingHistoryBrushCommand(_command.brushID);\n\n        _clone.location = _command.location;\n        _clone.uintColor = _command.uintColor;\n        _clone.brushScale = _command.brushScale;\n        _clone.brushExpansionFactor = _command.brushExpansionFactor;\n        _clone.brushBlendMode = _command.brushBlendMode;\n        _clone.executionTime = _command.executionTime;\n        _clone.brushAlpha = _command.brushAlpha;\n        _clone.brushRotation = _command.brushRotation;\n        _clone.timeScale = _command.timeScale;\n        _clone.layerID = _command.layerID;\n        _clone.generatedCommand = _command.generatedCommand;\n        _clone.unitID = _command.unitID;\n        //_clone.lineLength = _command.lineLength;\n        //_clone.prevCommand = _command.prevCommand;\n        //_clone.rendered = _command.rendered;\n\n        return _clone;\n    }\n\n    public function dispose():void\n{\n    __brush = null;\n    __debug = null;\n    __location = null;\n}\n\npublic function debug():void\n    {\n        __debug.msg(\"Command: \" + __brushID, \"1\");\n__debug.msg(\" \" + __unitID, \"1\");\n__debug.msg(\" \" + __location, \"1\");\n__debug.msg(\" \" + __uintColor, \"1\");\n__debug.msg(\" \" + __brushScale, \"1\");\n__debug.msg(\" \" + __brushExpansionFactor, \"1\");\n__debug.msg(\" \" + __brushBlendMode, \"1\");\n__debug.msg(\" \" + __executionTime, \"1\");\n__debug.msg(\" \" + __brushAlpha, \"1\");\n__debug.msg(\" \" + __brushRotation, \"1\");\n__debug.msg(\" \" + __timeScale, \"1\");\n__debug.msg(\" \" + __layerID, \"1\");\n__debug.msg(\" \" + __generatedCommand, \"1\");\n__debug.msg(\" \" + __brush, \"1\");\n}\n\npublic function debugTime():String\n{\n    return \"  Command: \" + __unitID + \": \" + __executionTime + \"\\n\";\n}\n\npublic function get xml():String\n{\n    return \"  <command uid=\\\"\" + unitID + \"\\\" lid=\\\"\" + layerID + \"\\\" t=\\\"\" + __executionTime + \"\\\" bid=\\\"\" + __brushID + \"\\\" c=\\\"\" + __uintColor + \"\\\" s=\\\"\" + __brushScale + \"\\\" bm=\\\"\" + __brushBlendMode + \"\\\" a=\\\"\" + __brushAlpha + \"\\\" r=\\\"\" + __brushRotation + \"\\\" g=\\\"\" + __generatedCommand + \"\\\" x=\\\"\" + __location.x + \"\\\" y=\\\"\" + __location.y + \"\\\" />\\n\";\n}\n\npublic function get json():Object\n{\n    __json = new Object();\n    __json.uid = unitID;\n    __json.lid = layerID;\n    __json.t = __executionTime;\n    __json.bid = __brushID;\n    __json.c = __uintColor;\n    __json.s = __brushScale;\n    __json.bm = __brushBlendMode;\n    __json.a = __brushAlpha;\n    __json.r = __brushRotation;\n    __json.g = __generatedCommand;\n    __json.x = __location.x;\n    __json.y = __location.y;\n\n    return __json;\n}\n\npublic function setCurrentTime():void\n{\n    __executionTime = getTimer();\n}\n\npublic function get brush():WwBrush\n{\n    __brush = WwDrawingBrushManager.instance.getBrushFromBrushID(__brushID);\n\n    if (__brush)\n    {\n        __brush.brushScale = __brushScale * __brushExpansionFactor;\n\n        switch(__brushBlendMode)\n        {\n            case \"erase\": __brush.image.blendMode = BlendMode.ERASE;\n                break;\n\n            case \"normal\": __brush.image.blendMode = BlendMode.NORMAL;\n                break;\n\n            default: __brush.image.blendMode = BlendMode.NORMAL;\n                break;\n        }\n\n        __brush.image.color = __uintColor;\n        __brush.image.rotation = __brushRotation;\n        __brush.image.x = __location.x;\n        __brush.image.y = __location.y;\n        __brush.image.alpha = __brushAlpha;\n    }\n\n    return __brush;\n}\n\npublic function get brushID():String\n{\n    return __brushID;\n}\n\npublic function set brushID(value:String):void\n{\n    __brushID = value;\n}\n\n\npublic function get location():Point\n{\n    return __location;\n}\n\npublic function set location(value:Point):void\n{\n    __location = value;\n}\n\npublic function get uintColor():uint\n{\n    return __uintColor;\n}\n\npublic function set uintColor(value:uint):void\n{\n    __uintColor = value;\n}\n\npublic function get brushScale():Number\n{\n    return __brushScale;\n}\n\npublic function set brushScale(value:Number):void\n{\n    __brushScale = value;\n}\n\npublic function get brushExpansionFactor():Number\n{\n    return __brushExpansionFactor;\n}\n\npublic function set brushExpansionFactor(value:Number):void\n{\n    __brushExpansionFactor = value;\n}\n\npublic function get brushBlendMode():String\n{\n    return __brushBlendMode;\n}\n\npublic function set brushBlendMode(value:String):void\n{\n    __brushBlendMode = value;\n}\n\npublic function get executionTime():int\n{\n    return __executionTime;\n}\n\npublic function set executionTime(value:int):void\n{\n    __executionTime = value;\n__normalizedExecutionTime = value;\n}\n\npublic function get scaledExecutionTime():int\n{\n    return __executionTime * __timeScale;\n}\n\npublic function get brushAlpha():Number\n{\n    return __brushAlpha;\n}\n\npublic function set brushAlpha(value:Number):void\n{\n    __brushAlpha = value;\n}\n\npublic function get brushRotation():Number\n{\n    return __brushRotation;\n}\n\npublic function set brushRotation(value:Number):void\n{\n    __brushRotation = value;\n}\n\npublic function get timeScale():Number\n{\n    return __timeScale;\n}\n\npublic function set timeScale(value:Number):void\n{\n    __timeScale = value;\n}\n\npublic function get layerID():String\n{\n    return __layerID;\n}\n\npublic function set layerID(value:String):void\n{\n    __layerID = value;\n}\n\n//NormalizedExecutionTime seems to be the same as regular executionTime\n\npublic function get normalizedExecutionTime():int\n{\n    return __normalizedExecutionTime;\n}\n\n\n\npublic function get scaledNormalizedExecutionTime():int\n{\n    return __normalizedExecutionTime * __timeScale;\n}\n\n\npublic function get generatedCommand():Boolean\n{\n    return __generatedCommand;\n}\n\npublic function set generatedCommand(value:Boolean):void\n{\n    __generatedCommand = value;\n}\n\npublic function get x():Number { return __location.x}\npublic function get y():Number { return __location.y}\n\npublic function get unitID():int\n{\n    return __unitID;\n}\n\npublic function set unitID(value:int):void\n{\n    __unitID = value;\n}\n\npublic function get lineLength():Number\n{\n    return __lineLength;\n}\n\npublic function set lineLength(value:Number):void\n{\n    __lineLength = value;\n}\n\npublic function get prevCommand():WwDrawingHistoryBrushCommand\n{\n    return __prevCommand;\n}\n\npublic function set prevCommand(value:WwDrawingHistoryBrushCommand):void\n{\n    __prevCommand = value;\n}\n\npublic function get rendered():Boolean\n{\n    return __rendered;\n}\n\npublic function set rendered(value:Boolean):void\n{\n    __rendered = value;\n}\n\n// Update Methods\n\npublic function updateBrushId(value:String):String\n{\n    if (value) { __brushID = value; return value }\n    else { return __brushID }\n}\n\npublic function updateUintColor(value:uint):uint\n{\n    if (value) { __uintColor = value; return value }\n    else { return __uintColor }\n}\n\npublic function updateUnitID(value:int):int\n{\n    if (value) { __unitID = value; return value }\n    else { return __unitID }\n}\n\npublic function updateLayerID(value:String):String\n{\n    if (value) { __layerID = value; return value }\n    else { return __layerID }\n}\n\npublic function updateExecutionTime(value:int):int\n{\n    if (value >= 0) { __executionTime = value; return value }\n    else { return __executionTime }\n}\n\npublic function updateBrushScale(value:Number):Number\n{\n    if (value) { __brushScale = value; return value }\n    else { return __brushScale }\n}\n\npublic function updateBlendMode(value:String):String\n{\n    if (value) { __brushBlendMode = value; return value }\n    else { return __brushBlendMode }\n}\n\npublic function updateBrushAlpha(value:Number):Number\n{\n    if (value) { __brushAlpha = value; return value }\n    else { return __brushAlpha }\n}\n\npublic function updateBrushRotation(value:Number):Number\n{\n    if (value) { __brushRotation = value; return value }\n    else { return __brushRotation }\n}\n\npublic function updateX(value:int):int\n{\n    if (!location) { location = new Point(0,0); }\n\n    if (value) { __location.x = value; return value }\n    else { return __location.x }\n}\n\npublic function updateY(value:int):int\n{\n    if (!location) { location = new Point(0,0); }\n\n    if (value) { __location.y = value; return value }\n    else { return __location.y }\n}\n\n\n//Redundancy Methods\n\npublic function checkRedundancyOfBrushID(data_object:Object, property:String, value:String):void\n{\n    if (value == __brushID) { }\nelse { __brushID = value; data_object[property] = __brushID }\n}\n\npublic function checkRedundancyOfUintColor(data_object:Object, property:String, value:uint):void\n{\n    if (value == __uintColor) { }\nelse { __uintColor = value; data_object[property] = __uintColor }\n}\n\npublic function checkRedundancyOfUnitID(data_object:Object, property:String, value:int):void\n{\n    if (value == __unitID) { }\nelse { __unitID = value; data_object[property] = __unitID }\n}\n\npublic function checkRedundancyOfLayerID(data_object:Object, property:String, value:String):void\n{\n    if (value == __layerID) { }\nelse { __layerID = value; data_object[property] = __layerID }\n}\n\npublic function checkRedundancyOfExecutionTime(data_object:Object, property:String, value:int):void\n{\n    //always include time parameter. SAR:150619\n    if (false && value == __executionTime) { }\nelse { __executionTime = value; data_object[property] = __executionTime }\n}\n\npublic function checkRedundancyOfBrushScale(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushScale) { }\nelse { __brushScale = value; data_object[property] = __brushScale }\n}\n\npublic function checkRedundancyOfBrushBlendMode(data_object:Object, property:String, value:String):void\n{\n    if (value == __brushBlendMode) { }\nelse { __brushBlendMode = value; data_object[property] = __brushBlendMode }\n}\n\npublic function checkRedundancyOfBrushAlpha(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushAlpha) { }\nelse { __brushAlpha = value; data_object[property] = __brushAlpha }\n}\n\npublic function checkRedundancyOfBrushRotation(data_object:Object, property:String, value:Number):void\n{\n    if (value == __brushRotation) { }\nelse { __brushRotation = value; data_object[property] = __brushRotation }\n}\n\npublic function checkRedundancyOfGeneratedCommand(data_object:Object, property:String, value:Boolean):void\n{\n    if (value == __generatedCommand) { }\nelse { __generatedCommand = value; data_object[property] = __generatedCommand }\n}\n\npublic function checkRedundancyOfX(data_object:Object, property:String, value:Number):void\n{\n    if (!location) { location = new Point(0,0); }\n\nif (value == __location.x) { }\nelse { __location.x = value; data_object[property] = __location.x }\n}\n\npublic function checkRedundancyOfY(data_object:Object, property:String, value:Number):void\n{\n    if (!location) { location = new Point(0,0); }\n\nif (value == __location.y) { }\nelse { __location.y = value; data_object[property] =  __location.y }\n}\n}\n}\n\n*/"],"sourceRoot":"/source/"}